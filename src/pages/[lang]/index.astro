---
import Layout from "../../layouts/Layout.astro";
import { getProps as getHeaderProps } from "../../components/blocks/Header/index";
import { getProps as getFooterProps } from "../../components/blocks/Footer/index";
import { getProps as getAboutProps } from "../../components/blocks/About/index";
import { getProps as getDirectionsProps } from "../../components/blocks/Directions/index";
import { getProps as getScheduleProps } from "../../components/blocks/Schedule/index";
import { getProps as getPricesProps } from "../../components/blocks/Prices/index";
import { getProps as getGallaryProps } from "../../components/blocks/Gallary/index";
import { getProps as getContactsProps } from "../../components/blocks/Contacts/index";
import { isAbsolutePath, concatPaths, normalizeURL } from "../../utils/url";
import { filterContent } from "../../utils/md";
import { getEnv, getKV } from "../../services/cloudflare";
import { translateJSON } from "../../services/translate";
import { LANG } from "../../constants/cookie";
import Root from "../../components/blocks/root";
import { PropsType } from "../../types/ui";
import { encodeB64 } from "../../utils/base64";

const url = Astro.url;
const request = Astro.request;
const { lang } = Astro.params;
const env = getEnv(request);

if (!env.LANGS.includes(lang)) return Astro.redirect(`/404`, 301);
const newUrl = normalizeURL(url);
if (newUrl != url.toString()) return Astro.redirect(newUrl, 301);

Astro.cookies.set(LANG, lang);

let content = [];
try {
  content = await Astro.glob("../../../content/**/*.md");
} catch (e) {
  console.log("ERROR", e, lang);
}

const indexLocalBusiness = filterContent(
  content,
  /\/content\/local-business\.md$/
)[0];
const localBusinessProps = { ...indexLocalBusiness?.frontmatter };

const translation = await translateJSON(
  {
    target: lang,
    content: {
      localBusiness: localBusinessProps,
    },
  },
  request
);

const { title, description, image, address, phones, openingHours, payment } = {
  ...localBusinessProps,
  ...translation?.localBusiness,
} as any;

const schema = {
  name: title,
  description,
  address: {
    "@type": "PostalAddress",
    streetAddress: address?.street || "",
    addressLocality: address?.city || "",
    addressCountry: address?.country || "",
  },
  geo: {
    "@type": "GeoCoordinates",
    latitude: address?.lat || "",
    longitude: address?.lng || "",
  },
  telephone: (phones && phones[0]) || "",
  sameAs: (address?.socials || []).map(({ href }) => href),
  openingHoursSpecification: openingHours || [],
  paymentAccepted: payment || [],
};
const origin = url.origin;
const imageAbsolute = isAbsolutePath(image)
  ? image
  : concatPaths(origin, image);

const KV = await getKV(request);
const imagesList = await KV.get("IMAGES");
const imageValues = (imagesList
  ?.split("\n")
  .map((a) => a.split(/\s+/g).slice(0, 2))
  .map(([key, value]) => [
    concatPaths("/", (key || "").trim()),
    (value || "").trim(),
  ])
  .filter(([key, value]) => !!key && !!value) || []) as Array<
  ["string", "string"]
>;

const clientEnv = {
  LANG: lang,
  URL: url.href,
  LANGS: env.LANGS,
  SITE: env.SITE,
  CDN_PROVIDER: env.CDN_PROVIDER,
  GOOGLE_API_KEY: env.GOOGLE_API_KEY,
  IMAGES: imageValues,
};

const PROPS_TYPE: PropsType = {
  lang,
  request,
  content,
};

const [header, footer, about, directions, schedule, prices, gallary, contacts] =
  (
    await Promise.allSettled([
      getHeaderProps(PROPS_TYPE),
      getFooterProps(PROPS_TYPE),
      getAboutProps(PROPS_TYPE),
      getDirectionsProps(PROPS_TYPE),
      getScheduleProps(PROPS_TYPE),
      getPricesProps(PROPS_TYPE),
      getGallaryProps(PROPS_TYPE),
      getContactsProps(PROPS_TYPE),
    ])
  ).map((pr) => (pr.status === "fulfilled" ? pr.value : {}));

const root = {
  header,
  footer,
  about,
  directions,
  schedule,
  prices,
  gallary,
  contacts,
  env: clientEnv,
} as any;

const value:string = encodeB64(JSON.stringify(root));
---

<Layout
  title={title}
  description={description}
  image={imageAbsolute}
  schema={schema}
>
  <Root value={value} client:idle />
</Layout>
