---
import { getPreferableLangs } from "../utils/url";
import { LANG } from "../constants/cookie";

import { getProps as getNotFoundProps } from "../components/blocks/NotFound/index";
import { getProps as getFooterProps } from "../components/blocks/Footer/index";
import { getProps as getHeaderProps } from "../components/blocks/Header/index";

import Layout from "../layouts/Layout.astro";
import Root from "../components/blocks/root404";
import { encodeB64 } from "../utils/base64";
import { PropsType, NavigationType, HeaderType, FooterType } from "../types/ui";
import { filterContent } from "../utils/md";
import { concatPaths, isAbsolutePath } from "../utils/url";
import { getEnv, getKV } from "../services/cloudflare";
import { translateJSON } from "../services/translate";

const cookieLang = Astro.cookies.get(LANG)?.value;
const request = Astro.request;
const env = getEnv(request);

let lang = env.LANGS[0];
if (cookieLang && env.LANGS.includes(cookieLang)) {
  lang = cookieLang;
} else {
  const prefLangs = getPreferableLangs(request).find((code) =>
    env.LANGS.includes(code)
  );
  if (prefLangs) {
    lang = prefLangs;
  }
}

// let notFound = [];
// try {
//   notFound = await Astro.glob("../../content/404.md");
// } catch (e) {}

// let localBusiness = [];
// try {
//   localBusiness = await Astro.glob("../../content/local-business.md");
// } catch (e) {}

// const indexNotFound = getIndex(notFound);
// const indexLocalBusiness = getIndex(localBusiness);

// const indexProps = {
//   ...indexNotFound?.frontmatter,
//   bodyHTML: indexNotFound?.compiledContent(),
// };
// const localBusinessProps = { ...indexLocalBusiness?.frontmatter };

// const translation = await translateJSON(
//   {
//     target: lang,
//     content: {
//       notFound: indexProps,
//       localBusiness: localBusinessProps,
//     },
//   },
//   Astro.request
// );

// const { headline, cta, title, description, image, bodyHTML } = {
//   ...indexProps,
//   ...translation?.notFound,
// } as {
//   bodyHTML: string;
//   headline: string;
//   title: string;
//   description: string;
//   image: string;
//   cta: { href: string; label: string };
// };

// const localBuiseness = {
//   ...localBusinessProps,
//   ...translation?.localBusiness,
// };

let content = [];
try {
  content = await Astro.glob("../../content/*.md");
} catch (e) {
  console.log("ERROR", e, lang);
}

const PROPS_TYPE: PropsType = {
  lang,
  request,
  content,
};

const indexLocalBusiness = filterContent(
  content,
  /\/content\/local-business\.md$/
)[0];
const localBusinessProps = { ...indexLocalBusiness?.frontmatter };

const translation = await translateJSON(
  {
    target: lang,
    content: {
      localBusiness: localBusinessProps,
    },
  },
  request
);

const { title, description, image } = {
  ...localBusinessProps,
  ...translation?.localBusiness,
} as any;

const [header, footer, notFound] = (
  await Promise.allSettled([
    getHeaderProps(PROPS_TYPE),
    getFooterProps(PROPS_TYPE),
    getNotFoundProps(PROPS_TYPE),
  ])
).map((pr) => (pr.status === "fulfilled" ? pr.value : {}));

const origin = Astro.url.origin;
const imageAbsolute = isAbsolutePath(image)
  ? image
  : concatPaths(origin, image);

const KV = await getKV(request);
const imagesList = await KV.get("IMAGES");
const imageValues = (imagesList
  ?.split("\n")
  .map((a) => a.split(/\s+/g).slice(0, 2))
  .map(([key, value]) => [
    concatPaths("/", (key || "").trim()),
    (value || "").trim(),
  ])
  .filter(([key, value]) => !!key && !!value) || []) as Array<
  ["string", "string"]
>;

const clientEnv = {
  LANG: lang,
  URL: Astro.url.href,
  LANGS: [],
  SITE: env.SITE,
  CDN_PROVIDER: env.CDN_PROVIDER,
  GOOGLE_API_KEY: env.GOOGLE_API_KEY,
  IMAGES: imageValues,
};

(header as HeaderType).navigation = {};
(footer as FooterType).navigation = {};

const root = {
  header,
  footer,
  notFound,
  env: clientEnv,
} as any;

const value: string = encodeB64(JSON.stringify(root));
---

<Layout
  lang={lang}
  title={title || ""}
  description={description || ""}
  image={imageAbsolute || ""}
>
  <Root value={value} client:idle />
</Layout>
